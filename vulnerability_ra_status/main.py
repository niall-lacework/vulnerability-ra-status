"""Vulnerability RA Status."""

import argparse
import os
import yaml

from vulnerability_ra_status import model
from vulnerability_ra_status import repository


def parse_sha_from_label(label: str) -> str | None:
    """Parse the sha from a label."""
    if len(label.split('-')) == 3:  # production label
        return label.split('-')[2]
    if len(label.split('_')) == 4:  # dev label
        return label.split('_')[2]

    return None


def get_label(
        service: str,
        repo: repository.AbstractRepo,
        cluster: str) -> str:
    """Get the label for a service in a cluster."""
    file = f'config/{cluster}/labels.yaml'
    contents = repo.get_file_contents(file)
    labels = yaml.safe_load(contents)
    return labels['labels'][service]


def get_index(commit: str, commits: dict[str, int]) -> int | None:
    """Get the index of a commit."""
    hash_len = len(commit)
    commits = {k[:hash_len]: v for k, v in commits.items()}
    return commits.get(commit)


def is_commit_in_cluster(
        commit: str,
        cluster_sha: str,
        commits: dict[str, int]) -> bool:
    """Check if a commit is in a cluster."""
    cluster_sha_index = get_index(cluster_sha, commits)
    commit_index = get_index(commit, commits)
    if commit_index is not None and cluster_sha_index is not None:
        return commit_index >= cluster_sha_index

    return False


def get_status(
        service: str,
        commit: str,
        clusters: list[tuple[str, model.Status]],
        service_repo: repository.AbstractRepo,
        label_repo: repository.AbstractRepo) -> model.Status:
    """Get the status of a service."""
    print(f'service: {service} commit: {commit}')
    commits = service_repo.get_commits(days=14)
    for cluster, status in clusters:
        label = get_label(service, label_repo, cluster)
        cluster_sha = parse_sha_from_label(label)
        if cluster_sha is not None:
            if is_commit_in_cluster(commit, cluster_sha, commits):
                return status

    if get_index(commit, commits) is not None:
        return model.Status.ON_MERGE

    return model.Status.UNKNOWN


def start():
    """Start the main program."""
    parser = argparse.ArgumentParser(description='Vulnerability RA Status')
    parser.add_argument('--service', dest='service', required=True, type=str,
                        help='Service to check. Must be one of:[{}]'.format(', '.join(model.vulnerability_labels)))  # noqa: E501
    parser.add_argument('--commit', dest='commit',
                        required=True, type=str, help='commit id')
    parser.add_argument('--github-access-token', dest='github_access_token',
                        default='', type=str, help='Github access token')
    args = parser.parse_args()

    access_token = os.environ.get(
        'GITHUB_ACCESS_TOKEN', args.github_access_token)
    if access_token == '':
        raise Exception('Github access token is not set')

    service = args.service

    clusters = model.clusters
    label_repo = repository.GithubRepo(
        owner='lacework-dev', repo='helm3-platform', access_token=access_token)

    repo = model.service_repo_map.get(service)
    if repo is None:
        raise Exception(f'Service {service} not found')

    owner, repo_name = repo.split('/')
    service_repo = repository.GithubRepo(
        owner=owner, repo=repo_name, access_token=access_token)

    print(get_status(
        service,
        args.commit,
        clusters,
        service_repo,
        label_repo).name)


if __name__ == '__main__':
    exit(start())
