"""Repository module for the vulnerability_ra_status application."""

from abc import ABC, abstractmethod
import datetime

from github import Github


class AbstractRepo(ABC):
    """Abstract repo."""

    def __init__(self, owner: str, repo: str) -> None:
        self.owner = owner
        self.repo = repo

    @abstractmethod
    def get_file_contents(self, file_path) -> bytes:
        """Get the contents of a file in a repository."""
        raise NotImplementedError

    @abstractmethod
    def get_commits(self, days: int | None = None) -> dict[str, int]:
        """
        Get the commits in the repo.

        Params:
        days:   The number of days to look back.
                If None, look back to the beginning of time.
        """
        raise NotImplementedError


class GithubRepo(AbstractRepo):
    """Github repo implementation."""

    def __init__(self, owner: str, repo: str, access_token: str) -> None:
        super().__init__(owner, repo)
        self.access_token = access_token

        self.git_repo = Github(self.access_token).get_repo(
            f'{self.owner}/{self.repo}')

    def get_file_contents(self, file_path: str) -> bytes:
        """Get the contents of a file in the repo."""
        content_file = self.git_repo.get_contents(file_path)
        return content_file.decoded_content  # type: ignore

    def get_commits(self, days: int | None = None) -> dict[str, int]:
        """
        Get the commits in the repo.

        Params:
        days:   The number of days to look back.
                If None, look back to the beginning of time.
        """
        if days:
            commits = self.git_repo.get_commits(
                sha='main',
                since=self._look_back(days))
        else:
            commits = self.git_repo.get_commits(sha='main')
        return {commit.sha: i for (i, commit) in enumerate(commits)}

    def _look_back(self, days: int) -> datetime.datetime:
        return datetime.datetime.now() - datetime.timedelta(days=days)
