from vulnerability_ra_status import main, repository


def test_can_parse_sha_from_label():
    labels = [
        '2022-07-06_pre-release_8d940e0_RA',
        'release-10.4.1-8d940e0',
        '2022-07-06_shadow-candidate_8d940e0_RA',
        '2022-07-06_release-candidate_8d940e0_RA'
    ]

    errors = []
    for label in labels:
        sha = main.parse_sha_from_label(label)
        if sha != '8d940e0':
            errors.append(f'{label} should have sha 8d940e0, but got {sha}')

    assert not errors, '\n'.join(errors)


class FakeRepo(repository.AbstractRepo):
    def __init__(self, owner: str, repo: str) -> None:
        super().__init__(owner, repo)
        self.file_contents = b'{"labels": {"athena-vuln-eval": "2022-07-06_pre-release_8d940e0_RA"}}'

    def get_file_contents(self, file_path: str) -> bytes:
        return self.file_contents

    def get_commits(self) -> dict[str, int]:
        return {'8d940e0': 0}


def test_can_get_label():
    service = 'athena-vuln-eval'
    repo = FakeRepo('owner', 'repo')
    cluster = 'prodn1'
    result = main.get_label(service, repo, cluster)

    assert result == '2022-07-06_pre-release_8d940e0_RA'


def test_return_true_if_commit_in_cluster():
    commit = '8d940e0'
    sha = '8d940e0'
    commits = {commit: 1}
    result = main.is_commit_in_cluster(commit, sha, commits)

    assert result is True


def test_return_false_if_commit_not_in_cluster():
    commit = 'abc123'
    sha = '8d940e0'
    commits = {
        commit: 0,
        sha: 1
    }
    result = main.is_commit_in_cluster(commit, sha, commits)

    assert result is False


def test_return_false_if_commit_not_in_commits():
    commit = 'notacommit'
    sha = '8d940e0'
    commits = {commit: 1}
    result = main.is_commit_in_cluster(commit, sha, commits)

    assert result is False


def test_get_index_truncated_commit():
    commit = '8d940e0'
    commits = {
        '8d940e034523564346': 0,
        'abcd0e034523564346': 1
    }
    result = main.get_index(commit, commits)

    assert result == 0
